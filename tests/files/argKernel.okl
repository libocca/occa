typedef struct {
  double x, y;
} mystruct;

@kernel void argKernel(void *nullPtr,
                       int *mem,
                       char i8,
                       unsigned char u8,
                       short i16,
                       unsigned short u16,
                       int i32,
                       unsigned int u32,
                       long i64,
                       unsigned long u64,
                       float f,
                       double d,
                       mystruct xy,
                       const char *str) {
  for (int i = 0; i < 1; ++i; @tile(1, @outer, @inner)) {
    // Note: NULL is not 0 because some backends don't handle NULL arguments properly
    printf(
      "nullPtr: %p\n"
      "mem: %d\n"
      "i8: %d\n"
      "u8: %d\n"
      "i16: %d\n"
      "u16: %d\n"
      "i32: %d\n"
      "u32: %d\n"
      "i64: %d\n"
      "u64: %d\n"
      "f: %f\n"
      "d: %f\n"
      "xy: [%f, %f]\n"
      "str: %s\n",
      nullPtr,
      (int) mem[0],
      (int) i8,
      (int) u8,
      (int) i16,
      (int) u16,
      (int) i32,
      (int) u32,
      (int) i64,
      (int) u64,
      f,
      d,
      xy.x, xy.y,
      str
    );
    if (i8 != 3) {
      throw 1;
    }
  }
}
