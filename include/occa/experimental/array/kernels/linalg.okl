// Make sure the compiler doesn't complain if we don't define some things
// We define what is needed on a kernel-by-kernel basis
#ifndef RETTYPE
#  define RETTYPE float
#endif
#ifndef VTYPE
#  define VTYPE float
#endif
#ifndef VTYPE2
#  define VTYPE2 float
#endif

#ifndef ABS_FUNC
#  define ABS_FUNC fabs
#endif

#ifndef CPU_DOT_OUTER
#  define CPU_DOT_OUTER 1
#endif
#ifndef GPU_DOT_OUTER
#  define GPU_DOT_OUTER 1
#endif
#ifndef GPU_DOT_INNER
#  define GPU_DOT_INNER 1
#endif

#ifndef TILESIZE
#  define TILESIZE 128
#endif
#ifndef TYPE_A
#  define TYPE_A float
#endif
#ifndef VTYPE_X
#  define VTYPE_X float
#endif
#ifndef VTYPE_Y
#  define VTYPE_Y float
#endif

#define CPU_BLOCK ((entries + CPU_DOT_OUTER - 1) / CPU_DOT_OUTER)
#define CPU_REDUCTION_BODY(INIT, OPERATION, RED_OPERATION)            \
  for (int oi = 0; oi < CPU_DOT_OUTER; ++oi; @outer) {                \
    RETTYPE r_red = INIT(oi);                                         \
    const int r_blockSize = CPU_BLOCK;                                \
    const int r_start = (oi * r_blockSize);                           \
    for (int i = r_start; i < (r_start + r_blockSize); ++i; @inner) { \
      if (i < entries) {                                              \
        OPERATION(r_red, i);                                          \
      }                                                               \
    }                                                                 \
    vecReduction[oi] = r_red;                                         \
  }

#define GPU_DOT_BLOCK (GPU_DOT_OUTER * GPU_DOT_INNER)

#if GPU_DOT_INNER >= (2*256)
#  define DO_OPER_256 1
#else
#  define DO_OPER_256 0
#endif

#if GPU_DOT_INNER >= (2*128)
#  define DO_OPER_128 1
#else
#  define DO_OPER_128 0
#endif

#if GPU_DOT_INNER >= (2*64)
#  define DO_OPER_64 1
#else
#  define DO_OPER_64 0
#endif

#if GPU_DOT_INNER >= (2*32)
#  define DO_OPER_32 1
#else
#  define DO_OPER_32 0
#endif

#if GPU_DOT_INNER >= (2*16)
#  define DO_OPER_16 1
#else
#  define DO_OPER_16 0
#endif

#if GPU_DOT_INNER >= (2*8)
#  define DO_OPER_8 1
#else
#  define DO_OPER_8 0
#endif

#if GPU_DOT_INNER >= (2*4)
#  define DO_OPER_4 1
#else
#  define DO_OPER_4 0
#endif

#if GPU_DOT_INNER >= (2*2)
#  define DO_OPER_2 1
#else
#  define DO_OPER_2 0
#endif

#if GPU_DOT_INNER >= (2*1)
#  define DO_OPER_1 1
#else
#  define DO_OPER_1 0
#endif

#define GPU_UNROLLED_DOT_ITER(N, RED_OPERATION)         \
  GPU_UNROLLED_DOT_ITER2(DO_OPER_##N, N, RED_OPERATION)

#define GPU_UNROLLED_DOT_ITER2(BOOL, N, RED_OPERATION)  \
  GPU_UNROLLED_DOT_ITER3(BOOL, N, RED_OPERATION)

#define GPU_UNROLLED_DOT_ITER3(BOOL, N, RED_OPERATION)  \
  GPU_UNROLLED_DOT_ITER_##BOOL(N, RED_OPERATION)

#define GPU_UNROLLED_DOT_ITER_0(N, RED_OPERATION)

#define GPU_UNROLLED_DOT_ITER_1(N, RED_OPERATION)   \
  for (int i = 0; i < GPU_DOT_INNER; ++i; @inner) { \
    if (i < N) {                                    \
      RED_OPERATION(s_red[i], s_red[i + N]);        \
    }                                               \
  }

#define GPU_REDUCTION_BODY(INIT, OPERATION, RED_OPERATION)              \
  for (int oi = 0; oi < GPU_DOT_OUTER; ++oi; @outer) {                  \
    @shared RETTYPE s_red[GPU_DOT_INNER];                               \
                                                                        \
    for (int i = 0; i < GPU_DOT_INNER; ++i; @inner) {                   \
      RETTYPE r_red = INIT(oi);                                         \
      for (int j = (oi*GPU_DOT_INNER + i); j < entries; j += GPU_DOT_BLOCK) { \
        OPERATION(r_red, j);                                            \
      }                                                                 \
      s_red[i] = r_red;                                                 \
    }                                                                   \
                                                                        \
    GPU_UNROLLED_DOT_ITER(256, RED_OPERATION);                          \
    GPU_UNROLLED_DOT_ITER(128, RED_OPERATION);                          \
    GPU_UNROLLED_DOT_ITER(64, RED_OPERATION);                           \
    GPU_UNROLLED_DOT_ITER(32, RED_OPERATION);                           \
    GPU_UNROLLED_DOT_ITER(16, RED_OPERATION);                           \
    GPU_UNROLLED_DOT_ITER(8, RED_OPERATION);                            \
    GPU_UNROLLED_DOT_ITER(4, RED_OPERATION);                            \
    GPU_UNROLLED_DOT_ITER(2, RED_OPERATION);                            \
    GPU_UNROLLED_DOT_ITER(1, RED_OPERATION);                            \
                                                                        \
    for (int i = 0; i < GPU_DOT_INNER; ++i; @inner) {                   \
      if (i == 0) {                                                     \
        vecReduction[oi] = s_red[0];                                    \
      }                                                                 \
    }                                                                   \
  }

#ifdef OCCA_USING_GPU
#  define REDUCTION_BODY GPU_REDUCTION_BODY
#else
#  define REDUCTION_BODY CPU_REDUCTION_BODY
#endif

#define INIT_ZERO(i) 0
#define INIT_FIRST(i) vec[0]
#define INIT_ABS_FIRST(i) ABS_FUNC((VTYPE) vec[0])

#define SUM_RED_OPERATION(red, part)            \
  red += part

#define MAX_RED_OPERATION(red, part)            \
  const RETTYPE r_red2 = red;                   \
  const RETTYPE r_part2 = part;                 \
  red = r_red2 > r_part2 ? r_red2 : r_part2

#define MIN_RED_OPERATION(red, part)            \
  const RETTYPE r_red2 = red;                   \
  const RETTYPE r_part2 = part;                 \
  red = r_red2 < r_part2 ? r_red2 : r_part2

@kernel void l1Norm(const int entries,
                    const VTYPE * vec,
                    RETTYPE * vecReduction) {
#define L1_NORM_OPERATION(out, idx)             \
  out += ABS_FUNC((VTYPE) vec[idx])
  REDUCTION_BODY(INIT_ZERO, L1_NORM_OPERATION, SUM_RED_OPERATION);
}

@kernel void l2Norm(const int entries,
                    const VTYPE * vec,
                    RETTYPE * vecReduction) {
#define L2_NORM_OPERATION(out, idx)             \
  const RETTYPE vec_i = vec[idx];               \
  out += vec_i * vec_i;
  REDUCTION_BODY(INIT_ZERO, L2_NORM_OPERATION, SUM_RED_OPERATION);
}

@kernel void lpNorm(const int entries,
                    const float p,
                    const VTYPE * vec,
                    RETTYPE * vecReduction) {
#define LP_NORM_OPERATION(out, idx)             \
  const RETTYPE vec_i = vec[idx];               \
  out += pow((VTYPE) vec_i, (VTYPE) p)
  REDUCTION_BODY(INIT_ZERO, LP_NORM_OPERATION, SUM_RED_OPERATION);
}

@kernel void lInfNorm(const int entries,
                      const VTYPE * vec,
                      RETTYPE * vecReduction) {
#define LINF_NORM_OPERATION(out, idx)               \
  const RETTYPE vec_i = ABS_FUNC((VTYPE) vec[idx]); \
  if (out < vec_i) {                                \
    out = vec_i;                                    \
  }

  REDUCTION_BODY(INIT_ABS_FIRST, LINF_NORM_OPERATION, MAX_RED_OPERATION);
}

@kernel void vecMax(const int entries,
                    const VTYPE * vec,
                    RETTYPE * vecReduction) {
#define MAX_OPERATION(out, idx)                 \
  const RETTYPE vec_i = vec[idx];               \
  out = out > vec_i ? out : vec_i
  REDUCTION_BODY(INIT_FIRST, MAX_OPERATION, MAX_RED_OPERATION);
}

@kernel void vecMin(const int entries,
                    const VTYPE * vec,
                    RETTYPE * vecReduction) {
#define MIN_OPERATION(out, idx)                 \
  const RETTYPE vec_i = vec[idx];               \
  out = out < vec_i ? out : vec_i
  REDUCTION_BODY(INIT_FIRST, MIN_OPERATION, MIN_RED_OPERATION);
}

@kernel void dot(const int entries,
                 const VTYPE * vec1,
                 const VTYPE2 * vec2,
                 RETTYPE * vecReduction) {
#define DOT_OPERATION(out, idx)                 \
  out += vec1[idx] * vec2[idx]
  REDUCTION_BODY(INIT_ZERO, DOT_OPERATION, SUM_RED_OPERATION);
}

@kernel void sum(const int entries,
                 const VTYPE * vec,
                 RETTYPE * vecReduction) {
#define SUM_OPERATION(out, idx)                 \
  out += vec[idx]
  REDUCTION_BODY(INIT_ZERO, SUM_OPERATION, SUM_RED_OPERATION);
}

@kernel void distance(const int entries,
                      const VTYPE * vec1,
                      const VTYPE2 * vec2,
                      RETTYPE * vecReduction) {
#define DISTANCE_OPERATION(out, idx)            \
  const RETTYPE diff = (vec1[idx] - vec2[idx]); \
  out += diff * diff
  REDUCTION_BODY(INIT_ZERO, DISTANCE_OPERATION, SUM_RED_OPERATION);
}

@kernel void axpy(const int entries,
                  const TYPE_A alpha,
                  const VTYPE_X * x,
                  VTYPE_Y * y) {
  for (int i = 0; i < entries; ++i; @tile(TILESIZE, @outer, @inner)) {
    y[i] += alpha * x[i];
  }
}
