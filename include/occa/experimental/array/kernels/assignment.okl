//---[ Compile-time Defines ]-----------
//  VTYPE_IN  : Type of input vectors
//  VTYPE_OUT : Type of output vectors
//  TILESIZE  : Tiling size
//======================================

@kernel void eq_const(const int entries,
                      const VTYPE_OUT value,
                      VTYPE_OUT * out) {
  for (int i = 0; i < entries; ++i; @tile(TILESIZE, @outer, @inner)) {
    out[i] = value;
  }
}

@kernel void plus_eq(const int entries,
                     const VTYPE_IN * in,
                     VTYPE_OUT * out) {
  for (int i = 0; i < entries; ++i; @tile(TILESIZE, @outer, @inner)) {
    out[i] += in[i];
  }
}

@kernel void plus_eq_const(const int entries,
                           const VTYPE_OUT value,
                           VTYPE_OUT * out) {
  for (int i = 0; i < entries; ++i; @tile(TILESIZE, @outer, @inner)) {
    out[i] += value;
  }
}

@kernel void sub_eq(const int entries,
                    const VTYPE_IN * in,
                    VTYPE_OUT * out) {
  for (int i = 0; i < entries; ++i; @tile(TILESIZE, @outer, @inner)) {
    out[i] -= in[i];
  }
}

@kernel void sub_eq_const(const int entries,
                          const VTYPE_OUT value,
                          VTYPE_OUT * out) {
  for (int i = 0; i < entries; ++i; @tile(TILESIZE, @outer, @inner)) {
    out[i] -= value;
  }
}

@kernel void mult_eq(const int entries,
                     const VTYPE_IN * in,
                     VTYPE_OUT * out) {
  for (int i = 0; i < entries; ++i; @tile(TILESIZE, @outer, @inner)) {
    out[i] *= in[i];
  }
}

@kernel void mult_eq_const(const int entries,
                           const VTYPE_OUT value,
                           VTYPE_OUT * out) {
  for (int i = 0; i < entries; ++i; @tile(TILESIZE, @outer, @inner)) {
    out[i] *= value;
  }
}

@kernel void div_eq(const int entries,
                    const VTYPE_IN * in,
                    VTYPE_OUT * out) {
  for (int i = 0; i < entries; ++i; @tile(TILESIZE, @outer, @inner)) {
    out[i] /= in[i];
  }
}

@kernel void div_eq_const(const int entries,
                          const VTYPE_OUT value,
                          VTYPE_OUT * out) {
  for (int i = 0; i < entries; ++i; @tile(TILESIZE, @outer, @inner)) {
    out[i] /= value;
  }
}
