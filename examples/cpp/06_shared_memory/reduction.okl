@kernel void reductionWithSharedMemory(const int entries,
                                       const float *vec,
                                       float *blockSum) {
  // Partial reduction of vector using loop tiles of size block (power of 2)
  for (int group = 0; group < ((entries + block - 1) / block); ++group; @outer) {
    @shared float s_vec[block];

    for (int item = 0; item < block; ++item; @inner) {
      if ((group * block + item) < entries) {
        s_vec[item] = vec[group * block + item];
      } else {
        s_vec[item] = 0;
      }
    }

    for (int alive = ((block + 1) / 2); 0 < alive; alive /= 2) {
      for (int item = 0; item < block; ++item; @inner) {
        if (item < alive) {
          s_vec[item] += s_vec[item + alive];
        }
      }
    }

    for (int item = 0; item < block; ++item; @inner) {
      if (item == 0) {
        blockSum[group] = s_vec[0];
      }
    }
  }
}

@kernel void reductionWithAtomics(const int entries,
                                  const float *vec,
                                  float *sum) {
  for (int i = 0; i < entries; ++i; @tile(16, @outer, @inner)) {
    @atomic *sum += vec[i];
  }
}
