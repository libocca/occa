@kernel void iso_kernel(float* ptr_next,
                        float* ptr_prev,
                        float* ptr_vel,
                        float* coeff,
                        int& n1,
                        int& n2,
                        int& n3){
  for (int iz = 0; iz < n3; ++iz; @outer) {
    @shared float ptrs[256*256*256];
    for (int iy = 0; iy < n2; ++iy; @tile(4, @outer)) {
      for (int ix = 0; ix < n1; ++ix; @inner) {
        const int dimn1n2 = n1 * n2;
        if (
          ix >= 8 && ix < (n1-8)
          && iy >= 8 && iy < (n2-8)
          && iz >= 8 && iz < (n3-8)
        ){
          int offset = iz*dimn1n2 + iy * n1 + ix;
          float value = 0.0f;
          value += ptr_prev[offset]*coeff[0];
          for (int ir = 1; ir <= 8; ir++) {
            value += coeff[ir] * (ptr_prev[offset + ir] + ptr_prev[offset - ir]);// horizontal
            value += coeff[ir] * (ptr_prev[offset + ir * n1] + ptr_prev[offset - ir * n1]);// vertical
            value += coeff[ir] * (ptr_prev[offset + ir*dimn1n2] + ptr_prev[offset - ir*dimn1n2]); // in front / behind
          }
          ptr_next[offset] = 2.0f* ptr_prev[offset] - ptr_next[offset] + value*ptr_vel[offset];
        }
      }
    }
  }
}
