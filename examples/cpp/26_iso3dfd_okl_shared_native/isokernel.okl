@kernel void iso_kernel(float* ptr_next,
                        float* ptr_prev,
                        float* ptr_vel,
                        float* coeff,
                        int& n1,
                        int& n2,
                        int& n3,
                        int& halfpad){
    for (int iz = 0; iz < n3; ++iz; @outer) {
    @shared float xs[WGSX+16];
    //Compute local index for item in x dimension
    
    for (int iy = 0; iy < n2; ++iy; @tile(4, @outer)) {
      if (
          iy >= 8 && iy < (n2-8)
          && iz >= 8 && iz < (n3-8)
        ){

	float *ptr_nextp = &ptr_next[halfpad];
	 float *ptr_prevp = &ptr_prev[halfpad];
	 float *ptr_velp = &ptr_vel[halfpad];

      const int dimn1n2 = (n1+2*halfpad) * n2;
      //Handle copy of data in the local array on X
      for (int ix = 0; ix < n1; ++ix; @inner) {
        int offset = iz*dimn1n2 + iy * (n1+2*halfpad) + ix;
        int xloc = ix % WGSX;
        //check if we need to get few elements before/after in the local array
	if(xloc==0){
		for(int i=-8; i<=0; i++){
                        xs[xloc + i + 8] = ptr_prevp[offset+i];
                }
	}
	else if(xloc == WGSX-1){
		for(int i=0; i<=8; i++){
                        xs[xloc + i + 8] = ptr_prevp[offset+i];
                }
	}else{
		xs[xloc + 8] = ptr_prevp[offset];
	}
      }
      for (int ix = 0; ix < n1; ++ix; @inner) {

          int offset = iz*dimn1n2 + iy * (n1+2*halfpad) + ix;
          int xloc = ix % WGSX;
          float value = 0.0f;
          value += ptr_prevp[offset]*coeff[0];
          for (int ir = 1; ir <= 8; ir++) {
            value += coeff[ir] * (xs[xloc + ir + 8] + xs[xloc - ir + 8]);// horizontal
            value += coeff[ir] * (ptr_prevp[offset + ir * (n1+2*halfpad)] + ptr_prevp[offset - ir * (n1+2*halfpad)]);// vertical
            value += coeff[ir] * (ptr_prevp[offset + ir*dimn1n2] + ptr_prevp[offset - ir*dimn1n2]); // in front / behind
          }
          ptr_nextp[offset] = 2.0f* ptr_prevp[offset] - ptr_nextp[offset] + value*ptr_velp[offset];
	}
      }
    }
  }
}
